1.在本地桌面或者其他地方创建一个文件夹
2.初始化这个文件夹，执行命令：git init

3.修改配置文件，创建一个连接，例如
  git config --global user.name "China***"
  git config --global user.email "666666@qq.com"
  git config --list  #查看配置文件的信息

4.克隆一个GitHub上的项目，执行命令：
  git clone https://github.com/China***/test***Git.git

5.创建一个测试文件：touch test01.txt
6.在文件中添加一个信息：vi test01.txt

7.开始上传到GitHub项目中
(1)git status  #查看当前文件的状态
(2)git add test01.txt  #添加到文件到暂存区中
(3)git reset test01.txt  #从暂存区中撤回，一般不用这个命令
(4)git status  #查看当前文件的状态
(5)git commit -m "这是提交的备注说明"    #提交信息并添加备注
(6)git push  #从暂存区提交到git仓库中

8.删除操作(当git的状态为deleted时)
(1)git rm --cached "文件路径"，#不删除物理文件，仅将该文件从缓存中删除；
(2)git rm --f "文件路径"， #不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）

9.GitHub官网中关键单词说明：
(1)Watch 关注项目
(2)Star 收藏项目
(3)Fork 复制一份创建者的项目
(4)lssues 给项目的创建者提一些建议
(5)pull requests 修改代码提交给原创建者
(6)Setting 设置，可以管理删除项目

10.Git查看版本日志
(1)git log  #查看版本
(2)git log --stat  #查看版本
(3)git log --pretty=oneline  #每个版本信息简化一行展示
(4)git log --oneline  #每个版本信息简化一行展示
(5)git reflog  #显示版本的指针日志，HEAD表示移动到某个版本需要的步数

11.版本前进后退的三种方式
(1)基于HEAD索引值操作 [推荐使用] eg：git reset --hard [版本号]  #通过版本号返回到指定版本
(2)使用^符号，只能后退  eg：git reset --hard HEAD^^^  #一个^符号代表回退一个版本，3个代表回退3个版本，n个代表回退n个 
(3)使用~符号，只能后退  eg：git reset --hard HEAD~3  #数字几就代表回退几个版本 

12.Git reset 的使用
(1)git reset --soft  #仅仅在本地库移动HEAD指针
(2)git reset --mixed  #在本地库移动HEAD指针,重置暂存区
(3)git reset --hard  #在本地库移动HEAD指针,重置暂存区和工作区

13.文件比较
(1)git diff apple.txt  #和本地库比较文件修改前后的变化
(2)git diff HEAD apple.txt  #例：本地库比较上一个版本文件修改前后的变化
(3)git diff HEAD^ apple.txt  #例：本地库比较上一个版本文件修改前后的变化

14.分支管理
(1)git branch -v  #查看分支
(2)git branch hot_fix  #创建一个名称为hot_fix的分支
(3)git cheakout hot_fix  #切换到hot_fix分支

15.合并分支
(1)第一步:切换到接受修改的分支 eg: git checkout [分支名] 
   例如，分支A修改了一个文件，分支B要同步分支A修改的文件，这时候，就要切换到分支B上
(2)第二步：执行merge命令
   eg：git merge [分支名]  #那第一步举例，这个分支名，就是分支A
   
16.解决分支冲突
(1)编辑文件，删除特殊符合
(2)把文件修改到满意程度，保存退出
(3)git add [文件名]
(4)git commit -m "备注信息"  #后面不加文件名








